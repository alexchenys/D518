"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function parseUri(options, db) {
    var result = '';
    if (options.uri) {
        var lastSlash = options.uri.lastIndexOf('/');
        var protocolSlash = options.uri.indexOf('//') + 1;
        var dbSlash = lastSlash > protocolSlash ? lastSlash : -1;
        if (dbSlash === -1) {
            result = " --uri=" + options.uri + "/" + db;
        }
        else {
            var pre = options.uri.slice(0, dbSlash);
            var optionsIndex = options.uri.indexOf('?');
            var post = optionsIndex === -1 ? '' : options.uri.slice(optionsIndex);
            result = " --uri=" + pre + "/" + db + post;
        }
    }
    return result;
}
function parseHost(options) {
    var result = '';
    if (options.host) {
        if (typeof options.host === 'string') {
            result = " --host=" + options.host;
        }
        else {
            var hosts = options.host
                .map(function (h) { return h.host + ":" + h.port; })
                .join(',');
            result = " --host=" + options.replicaSetName + "/" + hosts;
        }
    }
    return result;
}
function parsePort(options) {
    return options.port ? " --port=" + options.port : '';
}
function parseUsername(options) {
    return options.username ? " --username=" + options.username : '';
}
function parsePassword(options) {
    return options.password ? " --password=" + options.password : '';
}
function parseSslCAFile(options) {
    return options.sslCAFile ? " --sslCAFile=" + options.sslCAFile : '';
}
function parseSslPEMKeyFile(options) {
    return options.sslPEMKeyFile ? " --sslPEMKeyFile=" + options.sslPEMKeyFile : '';
}
function parseSslPEMKeyPassword(options) {
    return options.sslPEMKeyPassword ? " --sslPEMKeyPassword=" + options.sslPEMKeyPassword : '';
}
function parseSslCRLFile(options) {
    return options.sslCRLFile ? " --sslCRLFile=" + options.sslCRLFile : '';
}
function parseAuthenticationDatabase(options) {
    return options.authenticationDatabase ? " --authenticationDatabase=" + options.authenticationDatabase : '';
}
function parseAuthenticationMechanism(options) {
    return options.authenticationMechanism ? " --authenticationMechanism=" + options.authenticationMechanism : '';
}
function parseGssapiServiceName(options) {
    return options.gssapiServiceName ? " --gssapiServiceName=" + options.gssapiServiceName : '';
}
function parseGssapiHostName(options) {
    return options.gssapiHostName ? " --gssapiHostName=" + options.gssapiHostName : '';
}
function parseReadPreference(options) {
    var result = '';
    if (options.readPreference) {
        if (typeof options.readPreference === 'string') {
            result = " --readPreference=" + options.readPreference;
        }
        else {
            result = " --readPreference='" + JSON.stringify(options.readPreference) + "'";
        }
    }
    return result;
}
function parseDbPath(options) {
    return options.dbpath ? " --dbpath=" + options.dbpath : '';
}
function parseVerbose(options) {
    var result = '';
    if (options.verbose) {
        if (typeof options.verbose === 'number') {
            if (options.verbose > 0) {
                options.verbose = options.verbose <= 5 ? options.verbose : 5;
                for (var i = 0; i < options.verbose; i++) {
                    result += 'v';
                }
                result = ' -' + result;
            }
        }
        else {
            result = ' --verbose';
        }
    }
    return result;
}
function parseFields(options) {
    var result = '';
    if (options.fields) {
        if (typeof options.fields === 'string') {
            result = " --fields=\"" + options.fields + "\"";
        }
        else if (options.fields.length) {
            result = " --fields=\"" + options.fields.join(',') + "\"";
        }
    }
    return result;
}
function parseFieldFile(options) {
    return options.fieldFile ? " --fieldFile=" + options.fieldFile : '';
}
function parseQuery(options) {
    var result = '';
    if (options.query) {
        if (typeof options.query === 'string') {
            result = " --query='" + options.query + "'";
        }
        else {
            result = " --query='" + JSON.stringify(options.query) + "'";
        }
    }
    return result;
}
function parseType(options) {
    return options.type ? " --type=" + options.type : '';
}
function parseJsonFormat(options) {
    return options.jsonFormat ? " --jsonFormat=" + options.jsonFormat : '';
}
function parseSkip(options) {
    return options.skip ? " --skip=" + options.skip : '';
}
function parseLimit(options) {
    return options.limit ? " --limit=" + options.limit : '';
}
function parseSort(options) {
    var result = '';
    if (options.sort) {
        if (typeof options.sort === 'string') {
            result = " --sort='" + options.sort + "'";
        }
        else {
            result = " --sort='" + JSON.stringify(options.sort) + "'";
        }
    }
    return result;
}
function getCommand(database, parsedCollection, options, outPath) {
    var db = options.uri ? '' : " --db=" + database;
    var collection = " --collection=" + parsedCollection.name;
    var uri = parseUri(options, database);
    var host = parseHost(options);
    var port = parsePort(options);
    var username = parseUsername(options);
    var password = parsePassword(options);
    var ssl = options.ssl ? ' --ssl' : '';
    var sslCAFile = parseSslCAFile(options);
    var sslPEMKeyFile = parseSslPEMKeyFile(options);
    var sslPEMKeyPassword = parseSslPEMKeyPassword(options);
    var sslCRLFile = parseSslCRLFile(options);
    var sslAllowInvalidCertificates = options.sslAllowInvalidCertificates ? ' --sslAllowInvalidCertificates' : '';
    var sslAllowInvalidHostnames = options.sslAllowInvalidHostnames ? ' --sslAllowInvalidHostnames' : '';
    var sslFIPSMode = options.sslFIPSMode ? ' --sslFIPSMode' : '';
    var authenticationDatabase = parseAuthenticationDatabase(options);
    var authenticationMechanism = parseAuthenticationMechanism(options);
    var gssapiServiceName = parseGssapiServiceName(options);
    var gssapiHostName = parseGssapiHostName(options);
    var readPreference = parseReadPreference(options);
    var ipv6 = options.ipv6 ? ' --ipv6' : '';
    var slaveOk = options.slaveOk ? ' --slaveOk' : '';
    var directoryperdb = options.directoryperdb ? ' --directoryperdb' : '';
    var dbpath = parseDbPath(options);
    var verbose = parseVerbose(parsedCollection);
    var quiet = parsedCollection.quiet ? ' --quiet' : '';
    var fields = parseFields(parsedCollection);
    var fieldFile = parseFieldFile(parsedCollection);
    var query = parseQuery(parsedCollection);
    var type = parseType(parsedCollection);
    var jsonFormat = parseJsonFormat(parsedCollection);
    var jsonArray = parsedCollection.jsonArray ? ' --jsonArray' : '';
    var pretty = parsedCollection.pretty ? ' --pretty' : '';
    var noHeaderLine = parsedCollection.noHeaderLine ? ' --noHeaderLine' : '';
    var forceTableScan = parsedCollection.forceTableScan ? ' --forceTableScan' : '';
    var skip = parseSkip(parsedCollection);
    var limit = parseLimit(parsedCollection);
    var sort = parseSort(parsedCollection);
    var out = " --out=" + outPath;
    var command = "mongoexport" + uri + host + port + username + password + db + collection + ssl + sslCAFile + sslPEMKeyFile + sslPEMKeyPassword + sslCRLFile + sslAllowInvalidCertificates + sslAllowInvalidHostnames + sslFIPSMode + authenticationMechanism + gssapiServiceName + gssapiHostName + authenticationDatabase + readPreference + verbose + quiet + ipv6 + fields + fieldFile + query + type + jsonFormat + jsonArray + pretty + noHeaderLine + slaveOk + dbpath + directoryperdb + forceTableScan + skip + limit + sort + out;
    return command;
}
exports.getCommand = getCommand;
//# sourceMappingURL=getCommand.js.map