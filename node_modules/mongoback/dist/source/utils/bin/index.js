"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var checkMongoexportInstalled_1 = require("../checkMongoexportInstalled");
var options_1 = require("../options");
var logger_1 = require("../logger");
var connection_1 = require("../connection");
var getParsedCollections_1 = require("../getParsedCollections");
var exportCollections_1 = require("../exportCollections");
var askUri_1 = require("./askUri");
var askDestination_1 = require("./askDestination");
var askCollections_1 = require("./askCollections");
function mongoExportCli(options, cliOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var logger, _a, defaultUri, connectionOptions, uri, defaultCollections, parsedCollections, expectedCollections, _b, exportedCollections, code, actualCollections;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    // Check that mongoexport is installed
                    checkMongoexportInstalled_1.checkMongoexportInstalled();
                    // Get purged options
                    options = options_1.mergeOptions(options);
                    logger = new logger_1.Logger(options);
                    return [4 /*yield*/, connection_1.getMongoConnectionFromOptions(options)];
                case 1:
                    _a = _c.sent(), defaultUri = _a.uri, connectionOptions = _a.options;
                    return [4 /*yield*/, askUri_1.askUri(options, defaultUri, cliOptions.askUri)];
                case 2:
                    uri = _c.sent();
                    return [4 /*yield*/, getParsedCollections_1.getParsedCollections(options, { uri: uri, options: connectionOptions }, logger)];
                case 3:
                    defaultCollections = _c.sent();
                    return [4 /*yield*/, askCollections_1.askCollections(options, { uri: uri, options: connectionOptions }, defaultCollections, logger, cliOptions.askCollections)];
                case 4:
                    parsedCollections = _c.sent();
                    expectedCollections = getParsedCollections_1.removeSchemaDetails(parsedCollections);
                    logger.printExpectedCollections(expectedCollections);
                    // Ask destination path
                    return [4 /*yield*/, askDestination_1.askDestination(options, cliOptions.askDestination)];
                case 5:
                    // Ask destination path
                    _c.sent();
                    return [4 /*yield*/, exportCollections_1.exportCollections(parsedCollections, options, logger)];
                case 6:
                    _b = _c.sent(), exportedCollections = _b.exportedCollections, code = _b.code;
                    actualCollections = getParsedCollections_1.removeSchemaDetails(exportedCollections);
                    logger.printExportedCollections(actualCollections);
                    return [2 /*return*/];
            }
        });
    });
}
exports.mongoExportCli = mongoExportCli;
//# sourceMappingURL=index.js.map