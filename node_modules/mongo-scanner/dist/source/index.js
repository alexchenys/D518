"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./errors"));
var database_1 = require("./utils/database");
var cache_1 = require("./utils/cache");
var errors_1 = require("./errors");
var DEFAULT_OPTIONS = {
    useCache: false,
    excludeDatabases: undefined,
    excludeCollections: undefined,
    excludeSystem: false,
    excludeEmptyDatabases: false,
    ignoreLackOfPermissions: false,
    onLackOfPermissions: function () { }
};
/**
 * The MongoScanner class, to retrieve the database schema or to list databases and collections of
 * a MongoDB database.
 */
var MongoScanner = /** @class */ (function () {
    /**
     * The constructor of the [[MongoScanner]] class. The params are the uri and options for the
     * database connections. The connection is not established by the constructor, the connection
     * parameters are only saved in the [[MongoScanner]] instance.
     * @param uri The string uri of the mongodb connection. Default: 'mongodb://localhost:27017'.
     * @param connectionOptions The options object of the mongodb connection. The npm mongodb module is used under
     * the hood and this is the object provided to MongoClient. Default: { }.
     * @param options The options that will be used as a fallback for the [[ScanOptions]]. For all the
     * keys that will not be present in the options provided to a method that retrieves database or collections,
     * the values provided here will be used instead of the default ones. Default: { }.
     */
    function MongoScanner(uri, connectionOptions, options) {
        this.uri = uri;
        this.connectionOptions = connectionOptions;
        this.options = options;
        this.database = null;
        this.cache = new cache_1.Cache();
        this.persistentConnected = false;
        this.persistentActives = 0;
    }
    Object.defineProperty(MongoScanner.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        set: function (uri) {
            this._uri = uri || 'mongodb://localhost:27017';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MongoScanner.prototype, "connectionOptions", {
        get: function () {
            return this._connectionOptions;
        },
        set: function (connectionOptions) {
            this._connectionOptions = connectionOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MongoScanner.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (options) {
            this._options = this.mergeOptionsWithDefault(options);
        },
        enumerable: true,
        configurable: true
    });
    MongoScanner.prototype.mergeOptionsWithDefault = function (options) {
        options = options || {};
        var merged = {};
        for (var key in DEFAULT_OPTIONS) {
            merged[key] = (options[key] === undefined ? DEFAULT_OPTIONS[key] : options[key]);
        }
        return merged;
    };
    MongoScanner.prototype.mergeOptions = function (options) {
        options = options || {};
        var merged = {};
        for (var key in this.options) {
            merged[key] = (options[key] === undefined ? this.options[key] : options[key]);
        }
        return merged;
    };
    MongoScanner.prototype.passes = function (item, excludes) {
        return excludes.every(function (exclude) { return typeof exclude === 'string'
            ? item !== exclude
            : !exclude.test(item); });
    };
    MongoScanner.prototype.filterDatabases = function (databases, options) {
        var _this = this;
        var result = databases;
        if (options.excludeDatabases) {
            var excludes_1 = Array.isArray(options.excludeDatabases) ? options.excludeDatabases : [options.excludeDatabases];
            result = result
                .filter(function (database) { return _this.passes(database, excludes_1); });
        }
        return result;
    };
    MongoScanner.prototype.filterCollections = function (collections, options) {
        var _this = this;
        var result = collections;
        if (options.excludeSystem) {
            result = result
                .filter(function (collection) { return !/^system./.test(collection); });
        }
        if (options.excludeCollections) {
            var excludes_2 = Array.isArray(options.excludeCollections) ? options.excludeCollections : [options.excludeCollections];
            result = result
                .filter(function (database) { return _this.passes(database, excludes_2); });
        }
        return result;
    };
    MongoScanner.prototype._listDatabases = function (options, inheritDb) {
        return __awaiter(this, void 0, void 0, function () {
            var databases, database, persistent, error_1, e, disconnect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options.useCache) {
                            databases = this.cache.listDatabases();
                        }
                        if (!!databases) return [3 /*break*/, 9];
                        database = inheritDb, persistent = false;
                        if (!!database) return [3 /*break*/, 3];
                        if (!this.persistentConnected) return [3 /*break*/, 1];
                        this.persistentActives++;
                        persistent = true;
                        database = this.database;
                        return [3 /*break*/, 3];
                    case 1:
                        database = new database_1.Database(this.uri, this.connectionOptions);
                        return [4 /*yield*/, database_1.Database.connectDatabase(database)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, 6, 9]);
                        return [4 /*yield*/, database.listDatabases()];
                    case 4:
                        databases = _a.sent();
                        this.cache.cacheDatabases(databases);
                        return [3 /*break*/, 9];
                    case 5:
                        error_1 = _a.sent();
                        e = new errors_1.ListDatabasesError(null, error_1);
                        /* istanbul ignore next */
                        options.onLackOfPermissions(null, e);
                        /* istanbul ignore next */
                        if (options.ignoreLackOfPermissions) {
                            return [2 /*return*/, []];
                        }
                        else {
                            throw e;
                        }
                        return [3 /*break*/, 9];
                    case 6:
                        disconnect = (inheritDb === null);
                        if (persistent) {
                            this.persistentActives--;
                            disconnect = (!this.persistentConnected && this.persistentActives === 0);
                        }
                        if (!disconnect) return [3 /*break*/, 8];
                        return [4 /*yield*/, database_1.Database.disconnectDatabase(database)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [7 /*endfinally*/];
                    case 9:
                        databases = this.filterDatabases(databases, options);
                        return [2 /*return*/, databases];
                }
            });
        });
    };
    MongoScanner.prototype._listCollections = function (db, options, inheritDb) {
        return __awaiter(this, void 0, void 0, function () {
            var collections, database, persistent, error_2, e, disconnect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options.useCache) {
                            collections = this.cache.listCollections(db);
                        }
                        if (!!collections) return [3 /*break*/, 9];
                        database = inheritDb, persistent = false;
                        if (!!database) return [3 /*break*/, 3];
                        if (!this.persistentConnected) return [3 /*break*/, 1];
                        this.persistentActives++;
                        persistent = true;
                        database = this.database;
                        return [3 /*break*/, 3];
                    case 1:
                        database = new database_1.Database(this.uri, this.connectionOptions);
                        return [4 /*yield*/, database_1.Database.connectDatabase(database)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, 6, 9]);
                        return [4 /*yield*/, database.listCollections(db)];
                    case 4:
                        collections = _a.sent();
                        this.cache.cacheCollections(db, collections);
                        return [3 /*break*/, 9];
                    case 5:
                        error_2 = _a.sent();
                        e = new errors_1.ListCollectionsError(null, db, error_2);
                        /* istanbul ignore next */
                        options.onLackOfPermissions(null, e);
                        /* istanbul ignore next */
                        if (options.ignoreLackOfPermissions) {
                            return [2 /*return*/, []];
                        }
                        else {
                            throw e;
                        }
                        return [3 /*break*/, 9];
                    case 6:
                        disconnect = (inheritDb === null);
                        if (persistent) {
                            this.persistentActives--;
                            disconnect = (!this.persistentConnected && this.persistentActives === 0);
                        }
                        if (!disconnect) return [3 /*break*/, 8];
                        return [4 /*yield*/, database_1.Database.disconnectDatabase(database)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [7 /*endfinally*/];
                    case 9:
                        collections = this.filterCollections(collections, options);
                        return [2 /*return*/, collections];
                }
            });
        });
    };
    /**
     * Starts a persistent connection to mongodb. By default, all methods that retrieve databases or
     * collections from the mongodb open a connection before beginning and close it after finishing.
     * This method allows you to have a persistent connection instead and is useful if you need to perform
     * more than an operation and do not want to open and close connections for each of them.
     */
    MongoScanner.prototype.startConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.database = new database_1.Database(this.uri, this.connectionOptions);
                        return [4 /*yield*/, database_1.Database.connectDatabase(this.database)];
                    case 1:
                        _a.sent();
                        this.persistentConnected = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Closes an already open persistent connection.
     */
    MongoScanner.prototype.endConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.persistentConnected = false;
                        if (!(this.persistentActives === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, database_1.Database.disconnectDatabase(this.database)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves the databases of a mongodb as a promise to an array of strings.
     * @param options The [[ScanOptions]] options.
     * @returns A promise to an array of strings containing the retrieved databases.
     */
    MongoScanner.prototype.listDatabases = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var opt;
            return __generator(this, function (_a) {
                opt = this.mergeOptions(options);
                return [2 /*return*/, this._listDatabases(opt, null)];
            });
        });
    };
    /**
     * Retrieves the collections of the specified database as a promise to an array of strings.
     * @param database The database whose collections will be exported.
     * @param options The [[ScanOptions]] options.
     * @returns A promise to an array of strings containing the retrieved collections.
     */
    MongoScanner.prototype.listCollections = function (database, options) {
        return __awaiter(this, void 0, void 0, function () {
            var opt;
            return __generator(this, function (_a) {
                opt = this.mergeOptions(options);
                return [2 /*return*/, this._listCollections(database, opt, null)];
            });
        });
    };
    /**
     * Retrieves the schema of a mongodb database as a promise to a [[DatabaseSchema]] object.
     * @param options The [[ScanOptions]] options.
     * @returns A promise to a [[DatabaseSchema]] object representing the database schema. The
     * keys are the databases and their values the collections of the database as an array of strings
     */
    MongoScanner.prototype.getSchema = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var opt, schema, database, persistent, databases, _i, databases_1, db, _a, _b, disconnect;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        opt = this.mergeOptions(options);
                        schema = {};
                        if (!this.persistentConnected) return [3 /*break*/, 1];
                        this.persistentActives++;
                        persistent = true;
                        database = this.database;
                        return [3 /*break*/, 3];
                    case 1:
                        persistent = false;
                        database = new database_1.Database(this.uri, this.connectionOptions);
                        return [4 /*yield*/, database_1.Database.connectDatabase(database)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3: return [4 /*yield*/, this._listDatabases(opt, database)];
                    case 4:
                        databases = _c.sent();
                        _i = 0, databases_1 = databases;
                        _c.label = 5;
                    case 5:
                        if (!(_i < databases_1.length)) return [3 /*break*/, 8];
                        db = databases_1[_i];
                        _a = schema;
                        _b = db;
                        return [4 /*yield*/, this._listCollections(db, opt, database)];
                    case 6:
                        _a[_b] = _c.sent();
                        if (opt.excludeEmptyDatabases && !schema[db].length) {
                            delete schema[db];
                        }
                        _c.label = 7;
                    case 7:
                        _i++;
                        return [3 /*break*/, 5];
                    case 8:
                        disconnect = true;
                        if (persistent) {
                            this.persistentActives--;
                            disconnect = (!this.persistentConnected && this.persistentActives === 0);
                        }
                        if (!disconnect) return [3 /*break*/, 10];
                        return [4 /*yield*/, database_1.Database.disconnectDatabase(database)];
                    case 9:
                        _c.sent();
                        _c.label = 10;
                    case 10: return [2 /*return*/, schema];
                }
            });
        });
    };
    /**
     * Clears the cache, which contains the results of the previous executions of
     * the [[MongoScanner]] instance.
     */
    MongoScanner.prototype.clearCache = function () {
        this.cache.refreshCache();
    };
    return MongoScanner;
}());
exports.MongoScanner = MongoScanner;
//# sourceMappingURL=index.js.map